# 股票付款模擬平台 UI 元件指南

## 解決方案摘要 (更新版)

1. **CORS 問題解決**
   - 使用 Nuxt 後端 API 代理台灣證交所的 API
   - 創建 `/server/api/twse/companies.ts` 代理路由解決跨域問題
   - 修改 `useStocks.ts` 使用代理 API 取代直接呼叫

2. **Ant Design Vue 整合**
   - 安裝 `ant-design-vue@next` 套件
   - 創建 `plugins/antd.ts` 按需引入組件，而非全局引入
   - 使用 CDN 方式引入 Ant Design 樣式，解決打包問題
   - 創建自定義 CSS 文件處理樣式覆蓋和自定義

3. **Vercel 部署問題解決 (2024 更新)**
   - 使用 CDN 引入 Ant Design 樣式，完全避開 Rollup 解析問題
   - 配置 Nitro preset 為 'vercel'
   - 添加 vercel.json 文件自定義構建過程
   - 修改 package.json 的構建指令
   - 修復 TypeScript 類型問題

## UI 元件庫結構

```
ui/
  components/
    StockSearch.vue     - 股票搜尋元件 (使用 a-input-search, a-table)
    StockCart.vue       - 購物車元件 (使用 a-card, a-list, a-button)
    CheckoutForm.vue    - 結帳表單 (使用 a-form, a-steps, a-input, a-radio)
    ResultPage.vue      - 結果頁面 (使用 a-result, a-card, a-button)
```

## 如何使用元件

### 1. 股票搜尋元件

```vue
<StockSearch />
```

此元件提供以下功能：
- 使用 `a-input-search` 搜尋股票
- 使用 `a-table` 展示搜尋結果
- 整合 `useStocks` 和 `useCart` 功能
- 支援股票價格和漲跌幅顯示

### 2. 購物車元件

```vue
<StockCart />
```

此元件提供以下功能：
- 使用 `a-card` 和 `a-list` 展示購物車內容
- 整合 `useCart` 功能顯示總金額
- 支援移除股票和前往結帳

### 3. 結帳表單元件

```vue
<CheckoutForm />
```

此元件提供以下功能：
- 使用 `a-steps` 顯示 3 步驟流程
- 使用 `a-form` 表單驗證
- 支援多種付款方式選擇
- 顯示訂單摘要和總金額

### 4. 結果頁元件

```vue
<ResultPage />
```

此元件提供以下功能：
- 使用 `a-result` 顯示成功/失敗訊息
- 顯示訂單編號和交易時間
- 支援返回首頁、查看訂單、重新付款等功能

## 頁面架構建議

1. **首頁 (pages/index.vue)**
   ```vue
   <template>
     <div class="container mx-auto px-4 py-8">
       <h1 class="text-2xl font-bold mb-6">股票模擬交易平台</h1>
       <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
         <div class="md:col-span-2">
           <StockSearch />
         </div>
         <div>
           <StockCart />
         </div>
       </div>
     </div>
   </template>
   ```

2. **結帳頁 (pages/checkout.vue)**
   ```vue
   <template>
     <div class="container mx-auto px-4 py-8">
       <CheckoutForm />
     </div>
   </template>
   ```

3. **結果頁 (pages/result.vue)**
   ```vue
   <template>
     <div class="container mx-auto px-4 py-8">
       <ResultPage />
     </div>
   </template>
   ```

## 後續優化建議

1. **加入更多 Ant Design 互動元件**
   - `a-modal` 用於確認訂單或顯示更多資訊
   - `a-notification` 用於顯示操作反饋
   - `a-date-picker` 用於選擇歷史股價日期

2. **股票資訊頁優化**
   - 使用 `a-tabs` 分類顯示基本資訊、歷史走勢等
   - 整合 Ant Design Charts 顯示股價圖表

3. **使用者體驗優化**
   - 使用 `a-skeleton` 提供載入中的視覺反饋
   - 使用 `a-empty` 處理無結果畫面
   - 使用 `a-alert` 顯示系統通知

## CORS 問題解決詳解

CORS（跨來源資源共享）問題是因為網頁應用（如 Vercel 部署的網站）無法直接從瀏覽器呼叫台灣證交所的 API。解決方案是使用 Nuxt 的後端 API 作為代理：

1. **創建代理 API**

   ```typescript
   // server/api/twse/companies.ts
   export default defineEventHandler(async () => {
     try {
       const config = useRuntimeConfig();
       const response = await fetch(`${config.public.twseApiBase}/opendata/t187ap03_L`);
       
       if (!response.ok) {
         throw createError({
           status: response.status,
           statusText: `證交所API回應錯誤: ${response.statusText}`,
         });
       }
       
       return await response.json();
     } catch (error) {
       throw createError({
         status: 500,
         statusText: '無法取得上市公司資料，請稍後再試',
       });
     }
   });
   ```

2. **修改前端調用方式**

   ```typescript
   // 修改前：直接呼叫證交所API
   const { data: companies } = await useFetch(`${twseBase}/opendata/t187ap03_L`);
   
   // 修改後：呼叫我們的代理API
   const { data: companies } = await useFetch('/api/twse/companies');
   ```

這樣做的好處：
- 繞過瀏覽器的同源策略限制
- 可以在 API 代理中加入錯誤處理和格式轉換
- 更好的安全性和維護性

## Vercel 部署問題解決詳解 (更新版)

在 Vercel 上部署 Nuxt 3 + Ant Design Vue 專案時, 我們遇到了 CSS 引入的問題，無論是使用 `antd.css` 還是 `antd.min.css` 或 `style/index.css` 都會導致 Rollup 打包失敗。以下是改進的解決方案：

1. **使用 CDN 引入樣式**
   
   在 `nuxt.config.ts` 中：
   ```typescript
   export default defineNuxtConfig({
     // ...
     app: {
       head: {
         // ...
         link: [
           { rel: "icon", type: "image/x-icon", href: "/favicon.ico" },
           { rel: "stylesheet", href: "https://unpkg.com/ant-design-vue@3.2.20/dist/antd.min.css" }
         ],
       },
     }
   });
   ```

2. **移除插件中的 CSS 引入**
   
   在 `plugins/antd.ts` 中：
   ```typescript
   import { Button, Input, ... } from 'ant-design-vue';
   
   // 不再引入 CSS
   // import 'ant-design-vue/es/style/index.css';
   
   export default defineNuxtPlugin((nuxtApp) => {
     const app = nuxtApp.vueApp as any;
     app.component('a-button', Button);
     // ...
   });
   ```

3. **添加自定義 CSS 文件**
   
   在 `assets/css/main.css` 中添加自定義樣式，並在 `nuxt.config.ts` 中引入：
   ```typescript
   export default defineNuxtConfig({
     // ...
     css: ['~/assets/css/main.css'],
     // ...
   });
   ```

4. **配置 Nitro 和 Vercel 構建過程**
   
   ```typescript
   // nuxt.config.ts
   export default defineNuxtConfig({
     // ...
     nitro: {
       preset: 'vercel',
       esbuild: {
         options: {
           target: 'es2019'
         }
       }
     },
     // ...
   });
   ```
   
   ```json
   // vercel.json
   {
     "framework": "nuxt",
     "buildCommand": "NITRO_PRESET=vercel nuxt build",
     "devCommand": "nuxt dev",
     "regions": ["iad1"]
   }
   ```
   
   ```json
   // package.json 的 scripts 部分
   "scripts": {
     "build": "NITRO_PRESET=vercel nuxt build",
     // ...
   }
   ```

這種方法可以徹底避開 Rollup 打包 Ant Design CSS 時的問題，同時保持了組件的功能完整性。雖然使用 CDN 可能會略微影響初始載入速度，但相比於其他解決方案，這種方法更加穩定可靠。

## 注意事項

- 請確保已安裝 `ant-design-vue@next` 並配置好相關插件
- 確保 Nuxt 版本為 3.x 以上
- 在部署到生產環境前，請正確設定 .env 檔案中的 TWSE_API_BASE 變數
- 在 Vercel 上部署時要檢查環境變數是否已正確設置
- 如果 CDN 引入有問題，可以考慮將 Ant Design 的樣式檔下載到專案中使用
