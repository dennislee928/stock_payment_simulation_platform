name: Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "部署環境"
        required: false
        default: "preview"

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: production
      NITRO_PRESET: cloudflare-pages
      NODE_OPTIONS: --max_old_space_size=4096

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Setup Configuration
        run: |
          rm -rf node_modules package-lock.json .nuxt .output dist || true

          echo "創建 tailwind.config.js..."
          cat <<EOF > tailwind.config.js
          /** @type {import('tailwindcss').Config} */
          module.exports = {
            content: [
              "./components/**/*.{js,vue,ts}",
              "./layouts/**/*.vue",
              "./pages/**/*.vue",
              "./plugins/**/*.{js,ts}",
              "./app.vue",
              "./nuxt.config.{js,ts}",
            ],
            theme: {
              extend: {},
            },
            plugins: [],
          }
          EOF

          echo "// Package fix script" > package-fix.js
          echo "const fs = require('fs');" >> package-fix.js
          echo "const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));" >> package-fix.js
          echo "packageJson.devDependencies = packageJson.devDependencies || {};" >> package-fix.js
          echo "packageJson.devDependencies['@nuxtjs/tailwindcss'] = '^6.10.3';" >> package-fix.js
          echo "packageJson.devDependencies['tailwindcss'] = '^3.4.0';" >> package-fix.js
          echo "packageJson.devDependencies['postcss'] = '^8.4.33';" >> package-fix.js
          echo "packageJson.devDependencies['autoprefixer'] = '^10.4.17';" >> package-fix.js
          echo "packageJson.devDependencies['@rollup/wasm-node'] = '^4.13.0';" >> package-fix.js
          echo "packageJson.devDependencies['vitest'] = '^1.1.0';" >> package-fix.js
          echo "packageJson.devDependencies['@vitejs/plugin-vue'] = '^5.0.0';" >> package-fix.js
          echo "packageJson.devDependencies['@vitest/ui'] = '^1.1.0';" >> package-fix.js
          echo "packageJson.devDependencies['sass-embedded'] = '^1.69.5';" >> package-fix.js
          echo "packageJson.resolutions = packageJson.resolutions || {};" >> package-fix.js
          echo "packageJson.resolutions['rollup'] = 'npm:@rollup/wasm-node';" >> package-fix.js
          echo "packageJson.overrides = packageJson.overrides || {};" >> package-fix.js
          echo "packageJson.overrides['rollup'] = 'npm:@rollup/wasm-node';" >> package-fix.js
          echo "packageJson.scripts.build = 'nuxt build';" >> package-fix.js
          echo "packageJson.scripts.postinstall = 'nuxt prepare';" >> package-fix.js
          echo "packageJson.scripts.test = 'vitest';" >> package-fix.js
          echo "packageJson.scripts['test:ui'] = 'vitest --ui';" >> package-fix.js
          echo "delete packageJson.scripts.preinstall;" >> package-fix.js
          echo "fs.writeFileSync('./package.json', JSON.stringify(packageJson, null, 2));" >> package-fix.js
          node package-fix.js
          rm package-fix.js

          if [ ! -f "postcss.config.js" ]; then
            echo "module.exports = { plugins: { tailwindcss: {}, autoprefixer: {} } };" > postcss.config.js
          fi

          if [ ! -f "vitest.config.ts" ]; then
            echo "import { defineConfig } from 'vitest/config'" > vitest.config.ts
            echo "import vue from '@vitejs/plugin-vue'" >> vitest.config.ts
            echo "export default defineConfig({" >> vitest.config.ts
            echo "  plugins: [vue()]," >> vitest.config.ts
            echo "  test: { environment: 'jsdom', include: ['**/*.{test,spec}.{js,ts,jsx,tsx}'], exclude: ['node_modules', 'dist', '.nuxt', '.output'] }" >> vitest.config.ts
            echo "})" >> vitest.config.ts
          fi

      - name: Install Dependencies
        run: npm install

      - name: Build Nuxt Application
        run: npm run build

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: .output/public
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: main
