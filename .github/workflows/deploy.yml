name: Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "部署環境"
        required: false
        default: "preview"

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: production
      NITRO_PRESET: cloudflare-pages

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Setup Configuration
        run: |
          rm -rf node_modules package-lock.json .nuxt .output dist || true

          if [ ! -f "tailwind.config.js" ]; then
            echo "創建 tailwind.config.js..."
            cat > tailwind.config.js <<TAILWIND_EOF
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./components/**/*.{js,vue,ts}",
    "./layouts/**/*.vue",
    "./pages/**/*.vue",
    "./plugins/**/*.{js,ts}",
    "./app.vue",
    "./nuxt.config.{js,ts}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
TAILWIND_EOF
          fi

          cat > package-fix.js <<JS_EOF
const fs = require('fs');
const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));

packageJson.devDependencies = packageJson.devDependencies || {};
packageJson.devDependencies['@nuxtjs/tailwindcss'] = '^6.10.3';
packageJson.devDependencies['tailwindcss'] = '^3.4.0';
packageJson.devDependencies['postcss'] = '^8.4.33';
packageJson.devDependencies['autoprefixer'] = '^10.4.17';
packageJson.devDependencies['@rollup/wasm-node'] = '^4.13.0';
packageJson.devDependencies['vitest'] = '^1.1.0';
packageJson.devDependencies['@vitejs/plugin-vue'] = '^5.0.0';
packageJson.devDependencies['@vitest/ui'] = '^1.1.0';

packageJson.resolutions = packageJson.resolutions || {};
packageJson.resolutions['rollup'] = 'npm:@rollup/wasm-node';
packageJson.overrides = packageJson.overrides || {};
packageJson.overrides['rollup'] = 'npm:@rollup/wasm-node';

packageJson.scripts.build = 'nuxt build';
packageJson.scripts.postinstall = 'npx tailwindcss init -p && nuxt prepare';
packageJson.scripts.test = 'vitest';
packageJson.scripts['test:ui'] = 'vitest --ui';

delete packageJson.scripts.preinstall;

fs.writeFileSync('./package.json', JSON.stringify(packageJson, null, 2));
JS_EOF
fs.writeFileSync('./package.json', JSON.stringify(packageJson, null, 2));
JS_EOF

          node package-fix.js
          rm package-fix.js

          if [ ! -f "postcss.config.js" ]; then
            cat > postcss.config.js <<POSTCSS_EOF
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
POSTCSS_EOF
          fi

          if [ ! -f "vitest.config.ts" ]; then
            cat > vitest.config.ts <<VITEST_EOF
import { defineConfig } from 'vitest/config'
import vue from '@vitejs/plugin-vue'

export default defineConfig({
  plugins: [vue()],
  test: {
    environment: 'jsdom',
    include: ['**/*.{test,spec}.{js,ts,jsx,tsx}'],
    exclude: ['node_modules', 'dist', '.nuxt', '.output'],
  },
})
VITEST_EOF
          fi

      - name: Install Dependencies
        run: npm install
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Setup Tailwind CSS
        run: |
          mkdir -p assets/css
          if [ ! -f "assets/css/main.css" ]; then
            cat > assets/css/main.css <<CSS_EOF
@tailwind base;
@tailwind components;
@tailwind utilities;
CSS_EOF
          fi

      - name: Build Nuxt Application
        run: npm run build
        env:
          NODE_OPTIONS: "--max_old_space_size=8192"
          NUXT_APP_BASE_URL: "/"
          CF_PAGES: true
          NITRO_PRESET: cloudflare-pages

      - name: Ensure Output Directory
        run: |
          if [ ! -d ".output/public" ]; then
            mkdir -p .output/public
            cp -r public/* .output/public/ 2>/dev/null || true
            echo "<!DOCTYPE html><html><body><h1>Build Error</h1></body></html>" > .output/public/index.html
          fi

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: .output/public
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: main
          wranglerVersion: 3
