name: Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main # 自動部署來源分支
  workflow_dispatch: # ✅ 新增手動部署選項
    inputs:
      environment:
        description: "部署環境"
        required: false
        default: "preview"

jobs:
  deploy:
    runs-on: ubuntu-latest

    # 定義環境變數
    env:
      NODE_ENV: production
      NITRO_PRESET: cloudflare-pages

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.20.8"
          cache: "npm"

      # 解決 Rollup 依賴問題
      - name: Setup Rollup WebAssembly
        run: |
          # 刪除舊的文件
          rm -rf node_modules package-lock.json || true

          # 修改 package.json 改為只使用 wasm 版本的 rollup
          cat <<EOF > temp-fix.js
          const fs = require('fs');
          const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));

          // 添加 @rollup/wasm-node 到 devDependencies
          packageJson.devDependencies = packageJson.devDependencies || {};
          packageJson.devDependencies['@rollup/wasm-node'] = '^4.13.0';
          packageJson.devDependencies['@nuxtjs/tailwindcss'] = '^6.10.3';
          packageJson.devDependencies['tailwindcss'] = '^3.4.0';
          packageJson.devDependencies['postcss'] = '^8.4.33';
          packageJson.devDependencies['autoprefixer'] = '^10.4.17';

          // 確保有 resolutions 區塊
          packageJson.resolutions = packageJson.resolutions || {};
          packageJson.resolutions['rollup'] = 'npm:@rollup/wasm-node';

          // 修改 build 腳本，跳過 vercel-build-prepare.js
          packageJson.scripts.build = 'nuxt build';
          packageJson.scripts.postinstall = 'nuxt prepare';

          // 刪除不必要的 scripts
          delete packageJson.scripts.preinstall;

          fs.writeFileSync('./package.json', JSON.stringify(packageJson, null, 2));
          EOF

          node temp-fix.js
          rm temp-fix.js

      - name: Install Dependencies
        run: npm install --legacy-peer-deps
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      # 檢查是否安裝了 tailwindcss
      - name: Check Tailwind Installation
        run: |
          echo "確認 tailwindcss 是否正確安裝..."
          ls -la node_modules/@nuxtjs/tailwindcss || echo "tailwindcss not found!"

          # 如果不存在，嘗試單獨安裝
          if [ ! -d "node_modules/@nuxtjs/tailwindcss" ]; then
            echo "手動安裝 tailwindcss..."
            npm install -D @nuxtjs/tailwindcss tailwindcss postcss autoprefixer
          fi

      - name: Generate Fallback Output
        run: |
          mkdir -p .output/public
          echo "<!DOCTYPE html>
          <html>
          <head>
            <meta charset=\"utf-8\">
            <title>股票付款模擬平台</title>
            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">
            <style>
              body { font-family: system-ui, sans-serif; margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; min-height: 100vh; background-color: #f5f5f5; }
              .container { max-width: 800px; text-align: center; padding: 2rem; background-color: white; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
              h1 { color: #1677ff; }
            </style>
          </head>
          <body>
            <div class=\"container\">
              <h1>股票付款模擬平台</h1>
              <p>正在載入中，請稍候...</p>
              <p>如果您看到此頁面，表示網站正在部署中。請稍後再訪問。</p>
            </div>
          </body>
          </html>" > .output/public/index.html

          echo "已建立備用首頁"
          ls -la .output/public

      # 嘗試修改配置，暫時不使用 tailwindcss
      - name: Update Nuxt Config
        run: |
          cat <<EOF > nuxt.fix.js
          const fs = require('fs');
          const config = fs.readFileSync('./nuxt.config.ts', 'utf8');

          // 暫時移除 tailwindcss 模組
          const updatedConfig = config.replace(
            'modules: ["@pinia/nuxt", "@nuxtjs/tailwindcss"],',
            'modules: ["@pinia/nuxt"],'
          );

          fs.writeFileSync('./nuxt.config.ts', updatedConfig);
          EOF

          node nuxt.fix.js

          echo "修改後的 nuxt.config.ts:"
          cat nuxt.config.ts

      # 嘗試構建
      - name: Try Build
        run: npm run build
        continue-on-error: true
        env:
          NODE_OPTIONS: "--max_old_space_size=8192"
          NUXT_APP_BASE_URL: "/"
          CF_PAGES: true
          NITRO_PRESET: cloudflare-pages

      - name: Debug Output Directory
        run: |
          ls -la
          echo "== .output directory =="
          ls -la .output || echo "No .output directory"
          echo "== .output/public directory =="
          ls -la .output/public || echo "No .output/public directory"

      # 手動處理 Cloudflare 部署（如果 pages-action 有問題）
      - name: Manual Cloudflare Pages Deployment
        run: |
          echo "安裝相容版本的 wrangler..."
          npm i -g wrangler@3

          echo "使用 wrangler 直接部署..."
          wrangler pages deploy .output/public \
            --project-name="${{ secrets.CLOUDFLARE_PROJECT_NAME }}" \
            --branch="main" \
            --commit-dirty=true
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        continue-on-error: true

      # 如果手動部署失敗，嘗試使用 pages-action
      - name: Upload to Cloudflare Pages (Fallback)
        if: ${{ failure() }}
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: .output/public
          wranglerVersion: 3
