name: Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "部署環境"
        required: false
        default: "preview"

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: production
      NITRO_PRESET: cloudflare-pages
      NODE_OPTIONS: --max_old_space_size=4096

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Check for Cache
        id: cache-check
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .nuxt
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Clean Previous Installations
        if: steps.cache-check.outputs.cache-hit != 'true'
        run: rm -rf node_modules package-lock.json .nuxt .output dist

      - name: Fix and Update Dependencies
        run: |
          node << EOF
          const fs = require('fs');

          const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
          const devDeps = {
            "@nuxtjs/tailwindcss": "^6.10.3",
            "tailwindcss": "^3.4.0",
            "postcss": "^8.4.33",
            "autoprefixer": "^10.4.17",
            "@rollup/wasm-node": "^4.13.0",
            "vitest": "^1.1.0",
            "@vitejs/plugin-vue": "^5.0.0",
            "@vitest/ui": "^1.1.0",
            "sass-embedded": "^1.69.5"
          };

          packageJson.devDependencies = { ...packageJson.devDependencies, ...devDeps };

          packageJson.resolutions = {
            ...packageJson.resolutions,
            "rollup": "npm:@rollup/wasm-node"
          };

          packageJson.overrides = {
            ...packageJson.overrides,
            "rollup": "npm:@rollup/wasm-node"
          };

          packageJson.scripts.build = "nuxt build";
          packageJson.scripts.postinstall = "nuxt prepare";
          packageJson.scripts.test = "vitest";
          packageJson.scripts["test:ui"] = "vitest --ui";

          delete packageJson.scripts.preinstall;

          fs.writeFileSync('./package.json', JSON.stringify(packageJson, null, 2));
          EOF

      - name: Generate Configuration Files
        run: |
          if [ ! -f "tailwind.config.js" ]; then
            cat <<EOT > tailwind.config.js
          module.exports = {
            content: [
              "./components/**/*.{js,vue,ts}",
              "./layouts/**/*.vue",
              "./pages/**/*.vue",
              "./plugins/**/*.{js,ts}",
              "./app.vue",
              "./nuxt.config.{js,ts}",
            ],
            theme: { extend: {} },
            plugins: [],
          }
          EOT
          fi

          if [ ! -f "postcss.config.js" ]; then
            echo "module.exports = { plugins: { tailwindcss: {}, autoprefixer: {} } };" > postcss.config.js
          fi

          if [ ! -f "vitest.config.ts" ]; then
            cat <<EOT > vitest.config.ts
          import { defineConfig } from 'vitest/config';
          import vue from '@vitejs/plugin-vue';

          export default defineConfig({
            plugins: [vue()],
            test: {
              environment: 'jsdom',
              include: ['**/*.{test,spec}.{js,ts,jsx,tsx}'],
              exclude: ['node_modules', 'dist', '.nuxt', '.output']
            }
          });
          EOT
          fi

      - name: Install Dependencies
        run: npm ci || npm install

      - name: Force Install sass-embedded
        run: npm install -D sass-embedded

      - name: Build Project
        run: npm run build

      - name: Check if .output/public exists
        id: check_output
        run: |
          if [ -d ".output/public" ]; then
            echo "output_exists=true" >> $GITHUB_OUTPUT
          else
            echo "output_exists=false" >> $GITHUB_OUTPUT
            echo "::error::構建輸出目錄不存在，請檢查構建過程"
            exit 1
          fi

      - name: Fix missing index.html and create routes config
        if: steps.check_output.outputs.output_exists == 'true'
        run: |
          # 檢查是否存在 index.html
          if [ ! -f ".output/public/index.html" ]; then
            echo "未找到 index.html，創建 _routes.json 和 index.html 文件..."
            
            # 創建 _routes.json 以處理 SPA 路由
            cat > .output/public/_routes.json << EOF
          {
            "version": 1,
            "include": ["/*"],
            "exclude": [],
            "routes": [
              { "src": "/", "dest": "/index.html" }
            ]
          }
          EOF
            
            # 找到入口 JS 文件
            ENTRY_FILE=$(find .output/public/_nuxt -name "entry.*.js" | head -n 1 | xargs basename)
            ENTRY_CSS=$(find .output/public/_nuxt -name "entry.*.css" | head -n 1 | xargs basename 2>/dev/null)
            
            # 創建基本的 index.html
            cat > .output/public/index.html << EOF
          <!DOCTYPE html>
          <html lang="zh-TW">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>股票付款模擬平台</title>
            $([ -n "$ENTRY_CSS" ] && echo "<link rel=\"stylesheet\" href=\"/_nuxt/$ENTRY_CSS\">")
          </head>
          <body>
            <div id="__nuxt"></div>
            <script type="module" src="/_nuxt/${ENTRY_FILE}"></script>
          </body>
          </html>
          EOF
            echo "已創建必要的文件！"
          else
            echo "index.html 已存在，不需創建。"
          fi

      - name: Deploy to Cloudflare Pages
        if: steps.check_output.outputs.output_exists == 'true'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy .output/public --project-name=stock-payment-simulation-platform --commit-dirty=true

      - name: Notify Deployment Result
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ 部署成功完成！"
          else
            echo "❌ 部署失敗，請檢查上方錯誤訊息"
          fi
